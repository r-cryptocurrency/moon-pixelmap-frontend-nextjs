'use client';

import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useAccount, useDisconnect, useEnsName } from 'wagmi';
import { useWeb3Modal } from '@web3modal/wagmi/react';

interface WalletContextType {
  address: string | undefined;
  ensName: string | undefined;
  isConnected: boolean;
  isConnecting: boolean;
  connect: () => void;
  disconnect: () => void;
  displayAddress: string;
}

const WalletContext = createContext<WalletContextType>({
  address: undefined,
  ensName: undefined,
  isConnected: false,
  isConnecting: false,
  connect: () => {},
  disconnect: () => {},
  displayAddress: '',
});

// Client-side only component
const ClientOnly = ({ children }: { children: React.ReactNode }) => {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) return null;
  return <>{children}</>;
};

export function WalletProvider({ children }: { children: ReactNode }) {
  const [isConnecting, setIsConnecting] = useState(false);
  const { open } = useWeb3Modal();
  const { address, isConnected } = useAccount();
  const { data: ensName } = useEnsName({ address });
  const { disconnect: disconnectWallet } = useDisconnect();

  // Format address for display (e.g., 0x1234...5678)
  const displayAddress = address 
    ? ensName || `${address.substring(0, 6)}...${address.substring(address.length - 4)}`
    : '';

  // Handle connection
  const connect = async () => {
    try {
      setIsConnecting(true);
      await open();
    } catch (error) {
      console.error('Error connecting wallet:', error);
    } finally {
      setIsConnecting(false);
    }
  };

  // Handle disconnection
  const disconnect = () => {
    disconnectWallet();
  };

  // Save user data to the backend when connected
  useEffect(() => {
    const saveUserData = async () => {
      if (isConnected && address) {
        try {
          // Import here to avoid circular dependencies
          const { saveUserData } = await import('@/services/userApi');
          
          await saveUserData({
            address,
            ensName: ensName || null,
            lastConnected: new Date().toISOString(),
          });
        } catch (error) {
          console.error('Error saving user data:', error);
        }
      }
    };

    if (typeof window !== 'undefined') {
      saveUserData();
    }
  }, [isConnected, address, ensName]);

  const contextValue = {
    address,
    ensName,
    isConnected,
    isConnecting,
    connect,
    disconnect,
    displayAddress,
  };

  return (
    <WalletContext.Provider value={contextValue}>
      <ClientOnly>
        {children}
      </ClientOnly>
    </WalletContext.Provider>
  );
}

export const useWallet = () => useContext(WalletContext);
